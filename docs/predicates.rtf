{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\deftab480
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 If a predicate is present then the associated instance is used only if the predicate\
evaluates to true. Empty and missing predicates evaluate to true. Predicates are\
written using Reverse Polish Notation (RPN) and contain operators and operands\
(operands appear before their operator). For example `2 * (x - 1)` could be written\
as '2 x 1 - *'. Note that the whitespace is significant.\
\
unary operators are:\
	
\b is_empty
\b0 			string -> bool
\f1\fs24 \

\f0\fs36 	
\b is_not_empty
\b0 	string -> bool
\f1\fs24 \

\f0\fs36 	
\b len		
\b0 			string -> number
\f1\fs24 \

\f0\fs36 	
\b not
\b0 				bool -> bool\
	
\b to_num
\b0 			string -> number
\f1\fs24 \

\f0\fs36 	
\b to_lower
\b0 			string -> string
\f1\fs24 \

\f0\fs36 	
\b to_str	
\b0 			any -> string
\f1\fs24 \

\f0\fs36 	
\b to_upper
\b0 			string -> string
\f1\fs24 \

\f0\fs36 binary operators are: \
	
\b +
\b0 					number, number -> number	
\i rightmost arg is last on the stack
\i0 \
	
\b -
\b0 					number, number -> number\
	
\b *
\b0 					number, number -> number\
	
\b /
\b0 					number, number -> number\
	
\b %
\b0 					number, number -> number\
	
\b ==
\b0 					any, any -> bool\
	
\b !=
\b0 					any, any -> bool\
	
\b <
\b0 					T, T -> bool\
	
\b <=
\b0 					T, T -> bool\
	
\b >
\b0 					T, T -> bool\
	
\b >=		
\b0 			T, T -> bool\
	
\b and	
\b0 			bool, bool -> bool\
	
\b or		
\b0 			bool, bool -> bool\
	
\b contains
\b0 			target: string, needle: string -> bool
\f1\fs24 \

\f0\fs36 	
\b ends_with
\b0 		target: string, suffix: string -> bool
\f1\fs24 \

\f0\fs36 	
\b starts_with
\b0 		target: string, prefix: string -> bool
\f1\fs24 \

\f0\fs36 ternary operators are:\
	
\b if
\b0 					predicate: bool, true_case: T, false_case: T -> T
\f1\fs24 \

\f0\fs36 variadic operators are:\
	
\b concat
\b0 			..., N: number -> string		N is the number of any args concatenated
\f1\fs24 \

\f0\fs36 	
\b log		
\b0 			..., N: number -> string		concat + log
\f1\fs24 \

\f0\fs36 \
operands may be literals:\
	
\b bool	
\b0 	false, true\
	
\b number
\b0 	42, -23\
	
\b string	
\b0 	'hey', "hmm"\
or variables:\
	
\b selection.name
\b0 	the name component of the current selection subject, or "" if no entity is selected\
	
\b options.xxx
\b0 		value of an options boolean\
\
eval can fail for various reasons:\
1) an operator was not called with enough operands\
2) an operator was called with an operand of the wrong type (there are no implicit conversions
\f1\fs24 )\

\f0\fs36 3) undefined variable (including missing options)\
4) to_num was called with an invalid string\
5) syntax errors\
when the eval fails a message is logged and the predicate returns false\
}