{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green159\blue2;\red255\green0\blue0;}
\deftab480
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 http://answers.semanticweb.com/questions/723/rdf-storages-vs-other-nosql-storages\
http://www.christof-strauch.de/nosqldbs.pdf\
\
candidates are\
	
\b rdf
\b0  - standard rdf\
	
\b key-value
\b0  - some flavor of a nosql key-value store, values are (always?) json\
	
\b document and column
\b0  - haven't considered these in detail\
	
\b relational
\b0  - eliminated earlier (ACID is of limited benefit here, flexibility and openess of rdf is attractive)\
\

\b\fs50 rrdf pluses
\b0\fs36 \cf2 \
store is open to new triples (and reification)\
\cf0 	central store with stars hanging off it (eg routes could be in a star)\
	query could apply to all the stars (or maybe just all the stores (return an array of solutions))\
	\
	awkward to do this with key-value\
	either have a fixed key ("10.1.0.1-relations") which requires an icky update of the value\
	or wildcard key lookups which would require an icky linear scan over all the keys\
\pard\pardeftab480\pardirnatural
\cf2 \
robust query language\
	\cf0 UI uses canned queries so not clear how valuable this is\
	does help some with future proofing tho\
	also makes it easier for custom web apps\cf2 \
\
standard serialization\
	\cf0 would make it easier to do offline processing\
	eg processing historical data\
	would make UI testing a bit nicer as well\cf2 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf2 no vendor lockin\
\pard\pardeftab480\pardirnatural
\cf0 	established standard so backend can swap in different libs\
	front ends aren't restricted to simple key lookups\
\

\b\fs50 rrdf minuses
\b0\fs36 \
\pard\pardeftab480\pardirnatural
\cf3 relatively heavy weight\
	\cf0 especially sparql\
	but it is standard and exhaustive conformance test suites are available\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf3 impedence mismatch\
	\cf0 solutions are only a little worse than arbitrary values\
	but queries are quite a bit more complex than simply asking for a key\
\
\cf3 not all data is a good fit (time series, large objects, html)\
	\cf0 html is equally bad with both stores\
	large objects are close to equally bad (binary blobs could be stored a bit better with key-value)\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 	time-series is awful with rdf (key-value with array support would be better but still bad because have to store wrapped floats)\
\

\b\fs50 nosql pluses
\b0\fs36 \
\pard\pardeftab480\pardirnatural
\cf2 easier to merge results from multiple modelers?\
\pard\pardeftab480\pardirnatural
\cf3 	\cf0 don't think that this is true if rdf supports the star scheme\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf2 simple\
\pard\pardeftab480\pardirnatural
\cf3 	\cf0 this is true, but there's a large flexibility hit (tho it isn't clear how much this matters)\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf2 performance\
\pard\pardeftab480\pardirnatural
\cf3 	\cf0 nosql would be faster and scale better\
	unlikely to matter unless there are at least 100s of devices\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf2 distribution\
\pard\pardeftab480\pardirnatural
\cf3 	\cf0 lots of nosql libraries support horizontal distribution which allows for huge scaling benefits\
	but we don't care\
\
\pard\pardeftab480\pardirnatural

\b\fs50 \cf0 nosql minuses
\b0\fs36 \
\pard\pardeftab480\pardirnatural
\cf3 ad hoc\
	\cf0 key selection would be totally ad-hoc\
	unlikely to work with new UIs (including changes to the existing UI)\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf3 no standards\
	\cf0 bunch of different nosql designs and implementations\
	development effort will be fragmented reducing implementation quality\
	hampers interop (eg offline processing)\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
\pard\pardeftab480\pardirnatural
\cf3 inflexible\
	\cf0 no, or weak, query languages\
	primitive db orginization (eg simple keys)\cf3 \
\pard\pardeftab480\pardirnatural
\cf0 \
}